# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dogesniffer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import random
import requests
import json
import string
from PyQt5 import QtCore, QtGui, QtWidgets
from paho.mqtt import client as mqtt


class Ui_DogeSniffer(object):
    def setupUi(self, DogeSniffer):
        DogeSniffer.setObjectName("DogeSniffer")
        DogeSniffer.resize(545, 1006)
        DogeSniffer.setMaximumSize(QtCore.QSize(545, 1006))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        DogeSniffer.setFont(font)
        self.centralWidget = QtWidgets.QWidget(DogeSniffer)
        self.centralWidget.setEnabled(True)
        self.centralWidget.setObjectName("centralWidget")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.centralWidget)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.dogeSnifferWidget = QtWidgets.QWidget(self.centralWidget)
        self.dogeSnifferWidget.setMinimumSize(QtCore.QSize(523, 977))
        self.dogeSnifferWidget.setMaximumSize(QtCore.QSize(523, 977))
        self.dogeSnifferWidget.setObjectName("dogeSnifferWidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.dogeSnifferWidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.mqttBox = QtWidgets.QGroupBox(self.dogeSnifferWidget)
        self.mqttBox.setMinimumSize(QtCore.QSize(241, 107))
        self.mqttBox.setMaximumSize(QtCore.QSize(241, 107))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.mqttBox.setFont(font)
        self.mqttBox.setFlat(False)
        self.mqttBox.setCheckable(False)
        self.mqttBox.setObjectName("mqttBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.mqttBox)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.mqttLayout = QtWidgets.QGridLayout()
        self.mqttLayout.setObjectName("mqttLayout")
        self.mqttButton = QtWidgets.QPushButton(self.mqttBox)
        self.mqttButton.setObjectName("mqttButton")
        self.mqttLayout.addWidget(self.mqttButton, 1, 0, 1, 1)
        self.mqttStatus = QtWidgets.QLabel(self.mqttBox)
        self.mqttStatus.setScaledContents(False)
        self.mqttStatus.setAlignment(QtCore.Qt.AlignCenter)
        self.mqttStatus.setWordWrap(False)
        self.mqttStatus.setObjectName("mqttStatus")
        self.mqttLayout.addWidget(self.mqttStatus, 1, 1, 1, 1)
        self.mqttConnectLabel = QtWidgets.QLabel(self.mqttBox)
        self.mqttConnectLabel.setObjectName("mqttConnectLabel")
        self.mqttLayout.addWidget(self.mqttConnectLabel, 0, 0, 1, 2)
        self.verticalLayout_2.addLayout(self.mqttLayout)
        self.gridLayout_2.addWidget(self.mqttBox, 1, 0, 1, 1)
        self.bleSnifferBox = QtWidgets.QGroupBox(self.dogeSnifferWidget)
        self.bleSnifferBox.setEnabled(False)
        self.bleSnifferBox.setMinimumSize(QtCore.QSize(501, 395))
        self.bleSnifferBox.setMaximumSize(QtCore.QSize(501, 395))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.bleSnifferBox.setFont(font)
        self.bleSnifferBox.setFlat(False)
        self.bleSnifferBox.setCheckable(False)
        self.bleSnifferBox.setObjectName("bleSnifferBox")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.bleSnifferBox)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.availableLayout = QtWidgets.QGridLayout()
        self.availableLayout.setObjectName("availableLayout")
        self.availableLabel = QtWidgets.QLabel(self.bleSnifferBox)
        self.availableLabel.setObjectName("availableLabel")
        self.availableLayout.addWidget(self.availableLabel, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(318, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.availableLayout.addItem(spacerItem, 0, 1, 1, 1)
        self.verticalLayout_4.addLayout(self.availableLayout)
        self.availableTextEdit = QtWidgets.QPlainTextEdit(self.bleSnifferBox)
        self.availableTextEdit.setReadOnly(True)
        self.availableTextEdit.setObjectName("availableTextEdit")
        self.verticalLayout_4.addWidget(self.availableTextEdit)
        self.chooseLayout = QtWidgets.QGridLayout()
        self.chooseLayout.setObjectName("chooseLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.chooseDeviceButton = QtWidgets.QPushButton(self.bleSnifferBox)
        self.chooseDeviceButton.setObjectName("chooseDeviceButton")
        self.horizontalLayout.addWidget(self.chooseDeviceButton)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.chosenLabel = QtWidgets.QLabel(self.bleSnifferBox)
        self.chosenLabel.setObjectName("chosenLabel")
        self.horizontalLayout.addWidget(self.chosenLabel)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.chooseLayout.addLayout(self.horizontalLayout, 2, 0, 1, 2)
        spacerItem4 = QtWidgets.QSpacerItem(338, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.chooseLayout.addItem(spacerItem4, 0, 1, 1, 1)
        self.chooseLabel = QtWidgets.QLabel(self.bleSnifferBox)
        self.chooseLabel.setObjectName("chooseLabel")
        self.chooseLayout.addWidget(self.chooseLabel, 0, 0, 1, 1)
        self.chooseComboBox = QtWidgets.QComboBox(self.bleSnifferBox)
        self.chooseComboBox.setObjectName("chooseComboBox")
        self.chooseComboBox.addItem("")
        self.chooseComboBox.setItemText(0, "")
        self.chooseLayout.addWidget(self.chooseComboBox, 1, 0, 1, 2)
        self.verticalLayout_4.addLayout(self.chooseLayout)
        self.lampGroupBox = QtWidgets.QGroupBox(self.bleSnifferBox)
        self.lampGroupBox.setEnabled(False)
        self.lampGroupBox.setMinimumSize(QtCore.QSize(477, 131))
        self.lampGroupBox.setMaximumSize(QtCore.QSize(477, 131))
        self.lampGroupBox.setObjectName("lampGroupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.lampGroupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.hexLabel = QtWidgets.QLabel(self.lampGroupBox)
        self.hexLabel.setObjectName("hexLabel")
        self.gridLayout.addWidget(self.hexLabel, 0, 2, 1, 1)
        self.colorLabel = QtWidgets.QLabel(self.lampGroupBox)
        self.colorLabel.setObjectName("colorLabel")
        self.gridLayout.addWidget(self.colorLabel, 0, 0, 1, 1)
        self.colorComboBox = QtWidgets.QComboBox(self.lampGroupBox)
        self.colorComboBox.setObjectName("colorComboBox")
        self.colorComboBox.addItem("")
        self.colorComboBox.setItemText(0, "")
        self.colorComboBox.addItem("")
        self.colorComboBox.addItem("")
        self.colorComboBox.addItem("")
        self.gridLayout.addWidget(self.colorComboBox, 0, 1, 1, 1)
        self.hexButton = QtWidgets.QPushButton(self.lampGroupBox)
        self.hexButton.setObjectName("hexButton")
        self.gridLayout.addWidget(self.hexButton, 0, 4, 1, 1)
        self.hexLineEdit = QtWidgets.QLineEdit(self.lampGroupBox)
        self.hexLineEdit.setObjectName("hexLineEdit")
        self.gridLayout.addWidget(self.hexLineEdit, 0, 3, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout)
        self.switchLayout = QtWidgets.QGridLayout()
        self.switchLayout.setObjectName("switchLayout")
        self.switchSlider = QtWidgets.QSlider(self.lampGroupBox)
        self.switchSlider.setMaximum(1)
        self.switchSlider.setPageStep(1)
        self.switchSlider.setOrientation(QtCore.Qt.Horizontal)
        self.switchSlider.setObjectName("switchSlider")
        self.switchLayout.addWidget(self.switchSlider, 0, 0, 1, 3)
        self.onLabel = QtWidgets.QLabel(self.lampGroupBox)
        self.onLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.onLabel.setObjectName("onLabel")
        self.switchLayout.addWidget(self.onLabel, 1, 2, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(108, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.switchLayout.addItem(spacerItem5, 1, 1, 1, 1)
        self.offLabel = QtWidgets.QLabel(self.lampGroupBox)
        self.offLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.offLabel.setObjectName("offLabel")
        self.switchLayout.addWidget(self.offLabel, 1, 0, 1, 1)
        self.verticalLayout_3.addLayout(self.switchLayout)
        self.verticalLayout_4.addWidget(self.lampGroupBox)
        self.gridLayout_2.addWidget(self.bleSnifferBox, 2, 0, 1, 2)
        self.wifiSnifferBox = QtWidgets.QGroupBox(self.dogeSnifferWidget)
        self.wifiSnifferBox.setEnabled(False)
        self.wifiSnifferBox.setMinimumSize(QtCore.QSize(501, 388))
        self.wifiSnifferBox.setMaximumSize(QtCore.QSize(501, 388))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.wifiSnifferBox.setFont(font)
        self.wifiSnifferBox.setFlat(False)
        self.wifiSnifferBox.setCheckable(False)
        self.wifiSnifferBox.setObjectName("wifiSnifferBox")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.wifiSnifferBox)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.deviceNameLayout = QtWidgets.QGridLayout()
        self.deviceNameLayout.setObjectName("deviceNameLayout")
        self.deviceLayout = QtWidgets.QGridLayout()
        self.deviceLayout.setObjectName("deviceLayout")
        spacerItem6 = QtWidgets.QSpacerItem(368, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.deviceLayout.addItem(spacerItem6, 0, 1, 1, 1)
        self.deviceLabel = QtWidgets.QLabel(self.wifiSnifferBox)
        self.deviceLabel.setObjectName("deviceLabel")
        self.deviceLayout.addWidget(self.deviceLabel, 0, 0, 1, 1)
        self.deviceNameLayout.addLayout(self.deviceLayout, 0, 0, 1, 1)
        self.refreshButtonLayout = QtWidgets.QGridLayout()
        self.refreshButtonLayout.setObjectName("refreshButtonLayout")
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.refreshButtonLayout.addItem(spacerItem7, 0, 2, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.refreshButtonLayout.addItem(spacerItem8, 0, 0, 1, 1)
        self.refreshButton = QtWidgets.QPushButton(self.wifiSnifferBox)
        self.refreshButton.setObjectName("refreshButton")
        self.refreshButtonLayout.addWidget(self.refreshButton, 0, 1, 1, 1)
        self.deviceNameLayout.addLayout(self.refreshButtonLayout, 2, 0, 1, 1)
        self.deviceTextEdit = QtWidgets.QPlainTextEdit(self.wifiSnifferBox)
        self.deviceTextEdit.setReadOnly(True)
        self.deviceTextEdit.setObjectName("deviceTextEdit")
        self.deviceNameLayout.addWidget(self.deviceTextEdit, 1, 0, 1, 1)
        self.verticalLayout_7.addLayout(self.deviceNameLayout)
        self.deviceLocationBox = QtWidgets.QGroupBox(self.wifiSnifferBox)
        self.deviceLocationBox.setEnabled(False)
        self.deviceLocationBox.setMinimumSize(QtCore.QSize(477, 183))
        self.deviceLocationBox.setMaximumSize(QtCore.QSize(477, 183))
        self.deviceLocationBox.setObjectName("deviceLocationBox")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.deviceLocationBox)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.locationLayout = QtWidgets.QGridLayout()
        self.locationLayout.setObjectName("locationLayout")
        self.accuracyLabel = QtWidgets.QLabel(self.deviceLocationBox)
        self.accuracyLabel.setObjectName("accuracyLabel")
        self.locationLayout.addWidget(self.accuracyLabel, 2, 0, 1, 1)
        self.westLabel = QtWidgets.QLabel(self.deviceLocationBox)
        self.westLabel.setObjectName("westLabel")
        self.locationLayout.addWidget(self.westLabel, 1, 2, 1, 1)
        self.northLabel = QtWidgets.QLabel(self.deviceLocationBox)
        self.northLabel.setAutoFillBackground(False)
        self.northLabel.setObjectName("northLabel")
        self.locationLayout.addWidget(self.northLabel, 0, 2, 1, 1)
        self.percentLabel = QtWidgets.QLabel(self.deviceLocationBox)
        self.percentLabel.setObjectName("percentLabel")
        self.locationLayout.addWidget(self.percentLabel, 2, 2, 1, 1)
        self.longitudeLabel = QtWidgets.QLabel(self.deviceLocationBox)
        self.longitudeLabel.setObjectName("longitudeLabel")
        self.locationLayout.addWidget(self.longitudeLabel, 1, 0, 1, 1)
        self.latitudeLabel = QtWidgets.QLabel(self.deviceLocationBox)
        self.latitudeLabel.setObjectName("latitudeLabel")
        self.locationLayout.addWidget(self.latitudeLabel, 0, 0, 1, 1)
        self.latitudeTextEdit = QtWidgets.QLineEdit(self.deviceLocationBox)
        self.latitudeTextEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.latitudeTextEdit.setText("")
        self.latitudeTextEdit.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.latitudeTextEdit.setReadOnly(True)
        self.latitudeTextEdit.setObjectName("latitudeTextEdit")
        self.locationLayout.addWidget(self.latitudeTextEdit, 0, 1, 1, 1)
        self.longitudeTextEdit = QtWidgets.QLineEdit(self.deviceLocationBox)
        self.longitudeTextEdit.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.longitudeTextEdit.setReadOnly(True)
        self.longitudeTextEdit.setObjectName("longitudeTextEdit")
        self.locationLayout.addWidget(self.longitudeTextEdit, 1, 1, 1, 1)
        self.accuracyTextEdit = QtWidgets.QLineEdit(self.deviceLocationBox)
        self.accuracyTextEdit.setText("")
        self.accuracyTextEdit.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.accuracyTextEdit.setReadOnly(True)
        self.accuracyTextEdit.setObjectName("accuracyTextEdit")
        self.locationLayout.addWidget(self.accuracyTextEdit, 2, 1, 1, 1)
        self.verticalLayout_5.addLayout(self.locationLayout)
        self.locationButtonLayout = QtWidgets.QHBoxLayout()
        self.locationButtonLayout.setObjectName("locationButtonLayout")
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.locationButtonLayout.addItem(spacerItem9)
        self.locationButton = QtWidgets.QPushButton(self.deviceLocationBox)
        self.locationButton.setObjectName("locationButton")
        self.locationButtonLayout.addWidget(self.locationButton)
        spacerItem10 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.locationButtonLayout.addItem(spacerItem10)
        self.resetButton = QtWidgets.QPushButton(self.deviceLocationBox)
        self.resetButton.setObjectName("resetButton")
        self.locationButtonLayout.addWidget(self.resetButton)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.locationButtonLayout.addItem(spacerItem11)
        self.verticalLayout_5.addLayout(self.locationButtonLayout)
        self.verticalLayout_7.addWidget(self.deviceLocationBox)
        self.gridLayout_2.addWidget(self.wifiSnifferBox, 3, 0, 1, 2)
        self.chooseSniffBox = QtWidgets.QGroupBox(self.dogeSnifferWidget)
        self.chooseSniffBox.setEnabled(False)
        self.chooseSniffBox.setMinimumSize(QtCore.QSize(251, 107))
        self.chooseSniffBox.setMaximumSize(QtCore.QSize(251, 107))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.chooseSniffBox.setFont(font)
        self.chooseSniffBox.setFlat(False)
        self.chooseSniffBox.setCheckable(False)
        self.chooseSniffBox.setObjectName("chooseSniffBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.chooseSniffBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.typeLayout = QtWidgets.QGridLayout()
        self.typeLayout.setObjectName("typeLayout")
        self.sniffLabel = QtWidgets.QLabel(self.chooseSniffBox)
        self.sniffLabel.setObjectName("sniffLabel")
        self.typeLayout.addWidget(self.sniffLabel, 0, 0, 1, 1)
        self.sniffComboBox = QtWidgets.QComboBox(self.chooseSniffBox)
        self.sniffComboBox.setObjectName("sniffComboBox")
        self.sniffComboBox.addItem("")
        self.sniffComboBox.setItemText(0, "")
        self.sniffComboBox.addItem("")
        self.sniffComboBox.addItem("")
        self.typeLayout.addWidget(self.sniffComboBox, 0, 2, 1, 1)
        spacerItem12 = QtWidgets.QSpacerItem(50, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.typeLayout.addItem(spacerItem12, 0, 1, 1, 1)
        self.verticalLayout.addLayout(self.typeLayout)
        self.sniffLayout = QtWidgets.QGridLayout()
        self.sniffLayout.setObjectName("sniffLayout")
        self.sniffButton = QtWidgets.QPushButton(self.chooseSniffBox)
        self.sniffButton.setObjectName("sniffButton")
        self.sniffLayout.addWidget(self.sniffButton, 0, 0, 1, 1)
        self.sniffStatus = QtWidgets.QLabel(self.chooseSniffBox)
        self.sniffStatus.setScaledContents(False)
        self.sniffStatus.setAlignment(QtCore.Qt.AlignCenter)
        self.sniffStatus.setWordWrap(False)
        self.sniffStatus.setObjectName("sniffStatus")
        self.sniffLayout.addWidget(self.sniffStatus, 0, 1, 1, 1)
        self.verticalLayout.addLayout(self.sniffLayout)
        self.gridLayout_2.addWidget(self.chooseSniffBox, 1, 1, 1, 1)
        self.titleLabel = QtWidgets.QLabel(self.dogeSnifferWidget)
        self.titleLabel.setMinimumSize(QtCore.QSize(501, 51))
        self.titleLabel.setMaximumSize(QtCore.QSize(501, 51))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.titleLabel.setFont(font)
        self.titleLabel.setObjectName("titleLabel")
        self.gridLayout_2.addWidget(self.titleLabel, 0, 0, 1, 2)
        self.verticalLayout_6.addWidget(self.dogeSnifferWidget)
        DogeSniffer.setCentralWidget(self.centralWidget)

        self.errorMessage = QtWidgets.QErrorMessage()
        
        self.retranslateUi(DogeSniffer)
        QtCore.QMetaObject.connectSlotsByName(DogeSniffer)
        
        self.server = "broker.hivemq.com"
        self.topic = "dogesniffer/#"
        self.client_id = f'python-mqtt-{random.randint(0, 100)}'
        self.port = 1883
        self.client = mqtt.Client(self.client_id)
        self.client.on_connect = self.on_connect_mqtt
        self.client.on_message = self.on_message_mqtt
        
        self.mqttButton.clicked.connect(self.connect_mqtt)
        self.sniffButton.clicked.connect(self.set_sniff)
        self.colorComboBox.currentIndexChanged.connect(self.colorChosen)
        self.sniffComboBox.currentIndexChanged.connect(self.sniffChosen)
        self.chooseComboBox.currentIndexChanged.connect(self.bleDeviceChanged)
        self.switchSlider.valueChanged.connect(self.sliderMoved)
        self.hexButton.clicked.connect(self.hexValueSent)
        self.chooseDeviceButton.clicked.connect(self.deviceChosen)
        self.refreshButton.clicked.connect(self.refreshClicked)
        self.locationButton.clicked.connect(self.locationClicked)
        self.resetButton.clicked.connect(self.resetButtonClicked)

    def retranslateUi(self, DogeSniffer):
        _translate = QtCore.QCoreApplication.translate
        DogeSniffer.setWindowTitle(_translate("DogeSniffer", "DogeSniffer"))
        self.mqttBox.setTitle(_translate("DogeSniffer", "MQTT Connection"))
        self.mqttButton.setText(_translate("DogeSniffer", "Connect"))
        self.mqttStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#ff0000;\">Not Connected</span></p></body></html>"))
        self.mqttConnectLabel.setText(_translate("DogeSniffer", "Connect to MQTT broker!"))
        self.bleSnifferBox.setTitle(_translate("DogeSniffer", "BLE Sniffer"))
        self.availableLabel.setText(_translate("DogeSniffer", "Available Devices:"))
        self.chooseDeviceButton.setText(_translate("DogeSniffer", "Choose"))
        self.chosenLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">Not Chosen</span></p></body></html>"))
        self.chooseLabel.setText(_translate("DogeSniffer", "Choose Device:"))
        self.lampGroupBox.setTitle(_translate("DogeSniffer", "BLE Lamp Sniffer"))
        self.hexLabel.setText(_translate("DogeSniffer", "HEX:"))
        self.colorLabel.setText(_translate("DogeSniffer", "Choose Color:"))
        self.colorComboBox.setItemText(1, _translate("DogeSniffer", "Red"))
        self.colorComboBox.setItemText(2, _translate("DogeSniffer", "Green"))
        self.colorComboBox.setItemText(3, _translate("DogeSniffer", "Blue"))
        self.hexButton.setText(_translate("DogeSniffer", "Send"))
        self.onLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">ON</span></p></body></html>"))
        self.offLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">OFF</span></p></body></html>"))
        self.wifiSnifferBox.setTitle(_translate("DogeSniffer", "WiFi Sniffer"))
        self.deviceLabel.setText(_translate("DogeSniffer", "Device Names:"))
        self.refreshButton.setText(_translate("DogeSniffer", "Refresh"))
        self.deviceLocationBox.setTitle(_translate("DogeSniffer", "Sniffer Location"))
        self.accuracyLabel.setText(_translate("DogeSniffer", "<html><head/><body><p>Accuracy:</p></body></html>"))
        self.westLabel.setText(_translate("DogeSniffer", "<html><head/><body><p align=\"center\">°W</p></body></html>"))
        self.northLabel.setText(_translate("DogeSniffer", "<html><head/><body><p align=\"center\">°N</p></body></html>"))
        self.percentLabel.setText(_translate("DogeSniffer", "<html><head/><body><p align=\"center\">%</p></body></html>"))
        self.longitudeLabel.setText(_translate("DogeSniffer", "<html><head/><body><p>Longitude:</p></body></html>"))
        self.latitudeLabel.setText(_translate("DogeSniffer", "<html><head/><body><p>Latitude:</p></body></html>"))
        self.locationButton.setText(_translate("DogeSniffer", "Get Location"))
        self.resetButton.setText(_translate("DogeSniffer", "Reset"))
        self.chooseSniffBox.setTitle(_translate("DogeSniffer", "Choose Sniff"))
        self.sniffLabel.setText(_translate("DogeSniffer", "Sniff Type:"))
        self.sniffComboBox.setItemText(1, _translate("DogeSniffer", "BLE"))
        self.sniffComboBox.setItemText(2, _translate("DogeSniffer", "WiFi"))
        self.sniffButton.setText(_translate("DogeSniffer", "Confirm"))
        self.sniffStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">Not Confirmed</span></p></body></html>"))
        self.titleLabel.setText(_translate("DogeSniffer", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; color:#0055ff;\">DogeSniffer</span></p></body></html>"))
    
    def colorChosen(self):
        self.hexLineEdit.setText("")
        if self.colorComboBox.currentText() == "Red":
            color = "ff0000"
            self.client.publish("dogesniffer/hex_color",color)
        elif self.colorComboBox.currentText() == "Green":
            color = "00ff00"
            self.client.publish("dogesniffer/hex_color",color)
        elif self.colorComboBox.currentText() == "Blue":
            color = "0000ff"
            self.client.publish("dogesniffer/hex_color",color)
    
    def connect_mqtt(self):
        self.client.connect(self.server, self.port)
        self.client.loop_start()
            
    def deviceChosen(self):
        _translate = QtCore.QCoreApplication.translate
        selected_device = self.chooseComboBox.currentText()
        self.chooseDeviceButton.setEnabled(False)
        self.chosenLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#00aa00;\">Confirmed</span></p></body></html>"))
        self.client.publish("dogesniffer/BLE_device_chosen",selected_device)
    
    def bleDeviceChanged(self):
        self.chooseDeviceButton.setEnabled(True)
    
    def hexValueSent(self):
        self.colorComboBox.setCurrentIndex(0)
        hex_string = self.hexLineEdit.displayText()
        self.client.publish("dogesniffer/hex_color",hex_string)
        # if len(hex_string) <= 8:
        #     try:
        #         hex_val = int(hex_string,16)
        #         hex_val = hex(hex_val)
        #         if hex_val >= '0x0' and hex_val <= '0xffffff':
        #             fillin = str(hex_val[2:])
        #             fillin = fillin.zfill(6)
                    
        #             self.client.publish("dogesniffer/hex_color",fillin)
        #     except:
        #         self.hexLineEdit.setText("")
        #         self.errorMessage.showMessage("Invalid Color Entered")
        # else:
        #     self.hexLineEdit.setText("")
        #     self.errorMessage.showMessage("Improper Hex Color Entered")
            
    def locationClicked(self):
        self.locationButton.setEnabled(False)
        self.accuracyTextEdit.setText("")
        self.latitudeTextEdit.setText("")
        self.longitudeTextEdit.setText("")
        self.client.publish("dogesniffer/get_location","Send Nudes")
    
    def on_connect_mqtt(self, client, userdata, flags, rc):
        _translate = QtCore.QCoreApplication.translate
        if rc == 0:
            self.client.subscribe(self.topic)
            self.chooseSniffBox.setEnabled(True)
            self.mqttBox.setEnabled(False)
            self.mqttStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#00aa00;\">Connected!</span></p></body></html>"))
            self.sniffStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#ff0000;\">Not Confirmed</span></p></body></html>"))
        else:
            self.mqttStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#ff0000;\">Not Connected</span></p></body></html>"))
            self.errorMessage.showMessage("MQTT Conncetion Unsuccessful - Result Code "+str(rc))
    
    
    def on_message_mqtt(self, client, userdata, msg):
        _translate = QtCore.QCoreApplication.translate
        
        if str(msg.topic) == "dogesniffer/accuracy":
            if(str(msg.payload.decode("utf-8")) == "40000"): 
                self.latitudeTextEdit.setText("N/A")
                self.longitudeTextEdit.setText("N/A")
                self.accuracyTextEdit.setText("N/A")
                self.locationButton.setEnabled(True)
            else:
                acc = str(msg.payload.decode("utf-8"))
                self.accuracyTextEdit.setText(acc)
                self.locationButton.setEnabled(True)
        
        elif (str(msg.topic) == "dogesniffer/ble_lamp_init"):
            if str(msg.payload.decode("utf-8")) == "Device Found!":
                self.lampGroupBox.setEnabled(True)
                self.onLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#00aa00;\">ON</span></p></body></html>")) 
                self.offLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#ff0000;\">OFF</span></p></body></html>")) 
        
        elif (str(msg.topic) == "dogesniffer/ble_status"):
            if str(msg.payload.decode("utf-8")) == "BLE Confirmed!":
                try:
                    if self.sniffComboBox.currentText() == "BLE":
                        self.bleSnifferBox.setEnabled(True)
                        self.sniffStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#00aa00;\">Confirmed!</span></p></body></html>"))
                        self.chosenLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#ff0000;\">Not Chosen</span></p></body></html>"))
                    else:
                        self.errorMessage.showMessage("ESP32 Error - Try Again")
                except:
                    self.errorMessage.showMessage("ESP32 Error - Try Again")
        
        elif (str(msg.topic) == "dogesniffer/ble_devices"):
            try:
                self.availableTextEdit.appendPlainText(str(msg.payload.decode("utf-8")))
                self.availableTextEdit.selectAll()
                device = str(msg.payload.decode("utf-8"))
                if "Minger_H6001" in device:
                    self.chooseComboBox.addItem(device)
            except:
                self.errorMessage("ESP32 Error - Try Again Please")
        elif str(msg.topic) == "dogesniffer/BLE_device_confirmation":
            if str(msg.payload.decode("utf-8")) == "Device Confirmed!":
                self.lampGroupBox.setEnabled(True)
                self.offLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#ff0000;\">OFF</span></p></body></html>"))
                self.onLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#00aa00;\">ON</span></p></body></html>"))
                
        elif str(msg.topic) == "dogesniffer/device_names":
            try:
                mac_address = str(msg.payload.decode("utf-8"))
                link = "https://api.macaddress.io/v1?apiKey=at_e7TjhU7nfUI9jkhXCIO6SblUmv8DE&output=json&search=" + mac_address
                response = requests.get(link)
                
                results = response.json()
                results = results["vendorDetails"]
                companyName = results["companyName"]
                oui = results["oui"]
                if companyName != "":
                    output = "Name: " + companyName + ", Product OUI: " + oui 
                    self.deviceTextEdit.appendPlainText(output)
                    self.deviceTextEdit.selectAll()
            except:
                self.errorMessage("ESP32 Error - Try Again Please")
            
        elif str(msg.topic) == "dogesniffer/latitude":
            if(str(msg.payload.decode("utf-8")) != "0.0000000"): 
                lat = str(msg.payload.decode("utf-8"))
                self.latitudeTextEdit.setText(lat)
            
        elif str(msg.topic) == "dogesniffer/longitude":
            if(str(msg.payload.decode("utf-8")) != "0.0000000"): 
                lon = str(msg.payload.decode("utf-8"))
                self.longitudeTextEdit.setText(lon)
            
        elif str(msg.topic) == "dogesniffer/wifi_status":
            if str(msg.payload.decode("utf-8")) == "WiFi Confirmed!":
                try:
                    if self.sniffComboBox.currentText() == "WiFi":
                        self.sniffStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#00aa00;\">Confirmed!</span></p></body></html>"))
                        self.wifiSnifferBox.setEnabled(True)
                        self.deviceLocationBox.setEnabled(True)
                    else:
                        self.errorMessage.showMessage("ESP32 Error - Try Again")
                except:
                    self.errorMessage.showMessage("ESP32 Error - Try Again")
    
    def refreshClicked(self):
        self.deviceTextEdit.clear()
        self.client.publish("dogesniffer/refresh_devices","refresh")
    
    def resetButtonClicked(self):
        self.latitudeTextEdit.setText("")
        self.longitudeTextEdit.setText("")
        self.accuracyTextEdit.setText("")
        self.locationButton.setEnabled(True)
    
    def set_sniff(self):
        
        self.sniffButton.setEnabled(False)
        sniff_selection = self.sniffComboBox.currentText()
        
        _translate = QtCore.QCoreApplication.translate
        self.offLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">OFF</span></p></body></html>"))
        self.onLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">ON</span></p></body></html>"))
        self.chosenLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">Not Chosen</span></p></body></html>"))
        self.chooseComboBox.clear()
        self.availableTextEdit.clear()
        self.deviceTextEdit.clear()
        self.chooseComboBox.addItem("")
        self.wifiSnifferBox.setEnabled(False)
        self.bleSnifferBox.setEnabled(False)
        self.latitudeTextEdit.setText("")
        self.longitudeTextEdit.setText("")
        self.accuracyTextEdit.setText("")
        
        if sniff_selection == "WiFi":
            self.client.publish("dogesniffer/wifi_selected","WiFi Selected")
            self.sniffStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#0055ff;\">Confirming...</span></p></body></html>"))
        elif sniff_selection == "BLE":
            self.client.publish("dogesniffer/ble_selected","BLE Selected")
            self.sniffStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#0055ff;\">Confirming...</span></p></body></html>"))
        else:
            self.errorMessage.showMessage("Invalid Sniff Type Selected")
            self.sniffStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#ff0000;\">Not Confirmed</span></p></body></html>"))
        
    
    def sliderMoved(self):
        position = self.switchSlider.value()
        if position == 1:
            self.client.publish("dogesniffer/lamp_switch","1")
        else:
            self.client.publish("dogesniffer/lamp_switch","0")
    
    def sniffChosen(self):
        _translate = QtCore.QCoreApplication.translate
        self.wifiSnifferBox.setEnabled(False)
        self.bleSnifferBox.setEnabled(False)
        self.sniffButton.setEnabled(True)
        self.chooseComboBox.clear()
        self.availableTextEdit.clear()
        self.deviceTextEdit.clear()
        self.chooseComboBox.addItem("")
        self.latitudeTextEdit.setText("")
        self.longitudeTextEdit.setText("")
        self.accuracyTextEdit.setText("")
        self.sniffStatus.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#ff0000;\">Not Confirmed</span></p></body></html>"))
        self.offLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">OFF</span></p></body></html>"))
        self.onLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">ON</span></p></body></html>"))
        self.chosenLabel.setText(_translate("DogeSniffer", "<html><head/><body><p><span style=\" color:#808080;\">Not Chosen</span></p></body></html>"))
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    DogeSniffer = QtWidgets.QMainWindow()
    ui = Ui_DogeSniffer()
    ui.setupUi(DogeSniffer)
    DogeSniffer.show()
    sys.exit(app.exec_())